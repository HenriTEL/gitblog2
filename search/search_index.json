{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gitblog2","text":"<p>Git + Markdown = Blog</p> <p></p> <p>Gitblog2 is a blog generator focused on speed and simplicity. Blog posts are written in Markdown and that's it. Look at it yourself: this live example is solely based on this repository.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Build static HTML files from Markdown files. No JavaScript, no divs, no css classes.</li> <li>Low footprint (about 10kB compressed).</li> <li>Profile picture and social accounts included based on your Github profile.</li> <li>RSS and Atom feeds.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install gitblog2\n</code></pre> <p>There's also a container image available on docker hub.</p>"},{"location":"#usage","title":"Usage","text":"<p>From the command line:</p> <pre><code>gitblog2 https://github.com/HenriTEL/gitblog2.git --repo-subdir=example --base-url=https://example.com --no-social\n</code></pre> <p>From the library:</p> <pre><code>from gitblog2 import GitBlog\n\nsource_repo = \"https://github.com/HenriTEL/gitblog2.git\"\noutput_dir = \"./public\"\nurl_base = \"https://example.com\"\nwith GitBlog(source_repo, repo_subdir=\"example\") as gb:\n    gb.write_blog(output_dir, base_url=url_base, with_social=False)\n</code></pre> <p>From the container:</p> <pre><code>docker run --rm -v $PWD/public:/public \\\n    -e SOURCE_REPO=https://github.com/HenriTEL/gitblog2.git \\\n    -e REPO_SUBDIR=example \\\n    -e BASE_URL=https://example.com \\\n    -e NO_SOCIAL=true \\\n    henritel/gitblog2\n</code></pre>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>support frontmatter</li> <li>git comments</li> <li>strike through not working (both ~ and ~~)</li> </ul> <p>Improve the CLI using tips from https://clig.dev:</p> <ul> <li>Once installed, show what commands to run to actually start using it</li> <li>Comprehensive help texts</li> <li>Provide lots of examples</li> <li>Suggest what command to run next</li> <li>Suggest what to do when there is an error.</li> <li>Provide useful commands to debug nd explore, maybe <code>gitblog2 tree</code> to have a look at what the generated blog would look like, <code>gitblog config</code> to find what options are enabled/disabled. Think about ways to show metadata on articles like the updated/created at fields, maybe also list the custom templates and what articles would make use of them.</li> <li>Add a dry-run option</li> <li>Think about detecting misconfigurations, providing helpful message that point toward the right direction (e.g. line number in the faulty template).</li> <li>On the other hand, say when everything looks good (<code>gitblog troublesoot</code>?).</li> <li>Autocompletion?</li> <li>Not printing scary-looking stack traces, explain errors instead.</li> <li>Link the docs and code on the help page</li> <li>Link the code from the docs</li> <li>Make sure to exit with 0 for success and non-zero otherwise</li> <li>Make sure only machine readable content goes to stdout</li> <li>Messaging goes to stderr</li> <li>Provide terminal-based documentation (and maybe a man page)</li> <li>Use colors and ASCII art (like in ls -l) when relevant (output stream == TTY -&gt; human), also ckeck the NO_COLOR or FORCE_COLOR envs.</li> <li>Think about <code>--json</code>, <code>--plain</code> and <code>--jsonl</code> to format the output for computers</li> <li>Provide <code>-q</code> to avoid all text output</li> <li>Use emojis to catch the user\u2019s attention on critical things</li> <li>When stderr is a TTY, add criticity in logs only in verbose mode, and write the catched error in red at the end + a solution</li> <li>When stderr is not a TTY it's ok to output log levels, also tracebacks for unexpected or unexplainable error</li> <li>Add progress indicators for long operations (progress bar like docker pull?)</li> <li>Have some cache capabilities and make long operations recoverable</li> <li>Defer cleanup operations to the next run (exit faster on first error encountered)</li> <li>Make sure that env vars are only for user-specific config, settings that are likely to change on a run basis should be flag-only (e.g. -v, --quiet, --dry-run)</li> <li>Don't read secrets from env. Only via credential files, pipes, AF_UNIX sockets, secret management services, or another IPC mechanism.</li> <li>Make it a standalone executable with something like https://github.com/pyinstaller/pyinstaller</li> <li>Have a command to uninstall it, print it at the end of the installation process.</li> </ul> <p>Low priority:</p> <ul> <li>If avatar already present, don't attempt to download it and include it in the blog.</li> <li>Add gitlab support</li> <li>Add about page (and link to it from pp) based on user bio and README.md</li> <li>Use user's profile handle first and commit author only as a fallback</li> <li>E2E tests</li> <li>Deal with code's TODOs or make issues for newcomers</li> <li>Improve score on https://pagespeed.web.dev/analysis/https-blog-henritel-com/oktd50o2sy?form_factor=desktop</li> <li>Add doc for customisation</li> <li>Change template + accessible variables</li> <li>Add icons</li> <li>Change main color theme</li> <li>Make a script to remove unused icons</li> <li>Make a better TOC extension (remove div and classes)</li> <li>Make markdown renderer set loading=\"lazy\" on img tags</li> <li>Unit tests, pagespeed test</li> <li>Refactor lib.py</li> <li>Add contributing section</li> <li>Remove div and classes from footnotes</li> </ul>"},{"location":"#great-content","title":"Great content","text":"<p>https://accessiblepalette.com https://modernfontstacks.com/ https://anthonyhobday.com/sideprojects/saferules/ https://lawsofux.com/ https://developer.mozilla.org/en-US/docs/Web/HTML https://developer.mozilla.org/en-US/docs/Web/CSS https://developer.mozilla.org/en-US/docs/Web/SVG https://icons.getbootstrap.com/ </p>"},{"location":"#classless-stylesheets-candidates","title":"Classless stylesheets candidates","text":"<p>https://github.com/kevquirk/simple.css/blob/main/simple.css https://github.com/yegor256/tacit https://github.com/kognise/water.css https://github.com/xz/new.css https://github.com/edwardtufte/tufte-css https://github.com/programble/writ https://github.com/oxalorg/sakura https://github.com/susam/spcss </p>"},{"location":"creating-your-blog/","title":"Creating your blog","text":"<ol> <li>Initiate a repository on Github</li> <li>Put a Markdown file in a directory of your choice, for example <code>rand/hello-world.md</code>.</li> <li>Add some content to it.</li> <li>Commit / Push your changes.</li> </ol>"},{"location":"development-quickstart/","title":"Development quickstart","text":"<p>Make sure to have poetry installed, then Setup your local web server:</p> <pre><code>poetry install\nwget \"https://redbean.dev/redbean-tiny-2.2.com\" -O redbean.zip\nzip redbean.zip -j providers/assets/.init.lua\nchmod +x redbean.zip\n</code></pre> <p>In one terminal, update the blog as needed:</p> <pre><code>poetry run gitblog2 -l debug --repo-subdir=example --base-url=https://example.com --no-social\n</code></pre> <p>In another terminal, serve the blog:</p> <pre><code>./redbean.zip -D ./public\n</code></pre>"},{"location":"publishing-your-blog/","title":"Publishing your blog","text":""},{"location":"publishing-your-blog/#cloudflare-pages","title":"Cloudflare Pages","text":"<ol> <li> <p>Create your project  From your dashboard, select the Workers &amp; Pages section.  Click the Create application button.  Select Pages then click the Connect to Git button.  Configure your account, select your blog repository.  </p> </li> <li> <p>Set your project settings Build command: <code>pip install gitblog2 &amp;&amp; gitblog2 -l debug</code> Build output directory: /public Build system version: 2 (latest) Root directory: / Environment variables:</p> </li> </ol> Variable name Value BASE_URL <code>https://your-blog.com</code> GITHUB_TOKEN YOUR_API_TOKEN PYTHON_VERSION 3.11"}]}