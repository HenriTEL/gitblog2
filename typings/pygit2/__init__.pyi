"""
This type stub file was generated by pyright.
"""

import functools
from ._pygit2 import *
from .blame import Blame, BlameHunk
from .callbacks import (
    CheckoutCallbacks,
    Payload,
    RemoteCallbacks,
    StashApplyCallbacks,
    get_credentials,
    git_clone_options,
    git_fetch_options,
)
from .config import Config
from .credentials import *
from .errors import Passthrough, check_error
from .ffi import C, ffi
from .index import Index, IndexEntry
from .remote import Remote
from .repository import Repository as _Repository
from .packbuilder import PackBuilder
from .settings import Settings
from .submodule import Submodule
from .utils import to_bytes, to_str
from ._build import __version__

features = ...
GIT_FEATURE_THREADS = ...
GIT_FEATURE_HTTPS = ...
GIT_FEATURE_SSH = ...
GIT_REPOSITORY_INIT_OPTIONS_VERSION = ...
GIT_REPOSITORY_INIT_BARE = ...
GIT_REPOSITORY_INIT_NO_REINIT = ...
GIT_REPOSITORY_INIT_NO_DOTGIT_DIR = ...
GIT_REPOSITORY_INIT_MKDIR = ...
GIT_REPOSITORY_INIT_MKPATH = ...
GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE = ...
GIT_REPOSITORY_INIT_RELATIVE_GITLINK = ...
GIT_REPOSITORY_INIT_SHARED_UMASK = ...
GIT_REPOSITORY_INIT_SHARED_GROUP = ...
GIT_REPOSITORY_INIT_SHARED_ALL = ...
GIT_REPOSITORY_OPEN_NO_SEARCH = ...
GIT_REPOSITORY_OPEN_CROSS_FS = ...
GIT_REPOSITORY_OPEN_BARE = ...
GIT_REPOSITORY_OPEN_NO_DOTGIT = ...
GIT_REPOSITORY_OPEN_FROM_ENV = ...
GIT_REPOSITORY_STATE_NONE: int = ...
GIT_REPOSITORY_STATE_MERGE: int = ...
GIT_REPOSITORY_STATE_REVERT: int = ...
GIT_REPOSITORY_STATE_REVERT_SEQUENCE: int = ...
GIT_REPOSITORY_STATE_CHERRYPICK: int = ...
GIT_REPOSITORY_STATE_CHERRYPICK_SEQUENCE: int = ...
GIT_REPOSITORY_STATE_BISECT: int = ...
GIT_REPOSITORY_STATE_REBASE: int = ...
GIT_REPOSITORY_STATE_REBASE_INTERACTIVE: int = ...
GIT_REPOSITORY_STATE_REBASE_MERGE: int = ...
GIT_REPOSITORY_STATE_APPLY_MAILBOX: int = ...
GIT_REPOSITORY_STATE_APPLY_MAILBOX_OR_REBASE: int = ...
GIT_ATTR_CHECK_FILE_THEN_INDEX = ...
GIT_ATTR_CHECK_INDEX_THEN_FILE = ...
GIT_ATTR_CHECK_INDEX_ONLY = ...
GIT_ATTR_CHECK_NO_SYSTEM = ...
GIT_FETCH_PRUNE_UNSPECIFIED = ...
GIT_FETCH_PRUNE = ...
GIT_FETCH_NO_PRUNE = ...
GIT_CHECKOUT_NOTIFY_NONE: int = ...
GIT_CHECKOUT_NOTIFY_CONFLICT: int = ...
GIT_CHECKOUT_NOTIFY_DIRTY: int = ...
GIT_CHECKOUT_NOTIFY_UPDATED: int = ...
GIT_CHECKOUT_NOTIFY_UNTRACKED: int = ...
GIT_CHECKOUT_NOTIFY_IGNORED: int = ...
GIT_CHECKOUT_NOTIFY_ALL: int = ...
GIT_STASH_APPLY_PROGRESS_NONE: int = ...
GIT_STASH_APPLY_PROGRESS_LOADING_STASH: int = ...
GIT_STASH_APPLY_PROGRESS_ANALYZE_INDEX: int = ...
GIT_STASH_APPLY_PROGRESS_ANALYZE_MODIFIED: int = ...
GIT_STASH_APPLY_PROGRESS_ANALYZE_UNTRACKED: int = ...
GIT_STASH_APPLY_PROGRESS_CHECKOUT_UNTRACKED: int = ...
GIT_STASH_APPLY_PROGRESS_CHECKOUT_MODIFIED: int = ...
GIT_STASH_APPLY_PROGRESS_DONE: int = ...
LIBGIT2_VER = ...

def init_repository(
    path,
    bare=...,
    flags=...,
    mode=...,
    workdir_path=...,
    description=...,
    template_path=...,
    initial_head=...,
    origin_url=...,
) -> _Repository:
    """
    Creates a new Git repository in the given *path*.

    If *bare* is True the repository will be bare, i.e. it will not have a
    working copy.

    The *flags* may be a combination of:

    - GIT_REPOSITORY_INIT_BARE (overriden by the *bare* parameter)
    - GIT_REPOSITORY_INIT_NO_REINIT
    - GIT_REPOSITORY_INIT_NO_DOTGIT_DIR
    - GIT_REPOSITORY_INIT_MKDIR
    - GIT_REPOSITORY_INIT_MKPATH (set by default)
    - GIT_REPOSITORY_INIT_EXTERNAL_TEMPLATE

    The *mode* parameter may be any of GIT_REPOSITORY_SHARED_UMASK (default),
    GIT_REPOSITORY_SHARED_GROUP or GIT_REPOSITORY_INIT_SHARED_ALL, or a custom
    value.

    The *workdir_path*, *description*, *template_path*, *initial_head* and
    *origin_url* are all strings.

    See libgit2's documentation on git_repository_init_ext for further details.
    """
    ...

def clone_repository(
    url: str,
    path: str,
    bare=...,
    repository=...,
    remote=...,
    checkout_branch=...,
    callbacks=...,
) -> _Repository:
    """
    Clones a new Git repository from *url* in the given *path*.

    Returns: a Repository class pointing to the newly cloned repository.

    Parameters:

    url : str
        URL of the repository to clone.
    path : str
        Local path to clone into.
    bare : bool
        Whether the local repository should be bare.
    remote : callable
        Callback for the remote to use.

        The remote callback has `(Repository, name, url) -> Remote` as a
        signature. The Remote it returns will be used instead of the default
        one.
    repository : callable
        Callback for the repository to use.

        The repository callback has `(path, bare) -> Repository` as a
        signature. The Repository it returns will be used instead of creating a
        new one.
    checkout_branch : str
        Branch to checkout after the clone. The default is to use the remote's
        default branch.
    callbacks : RemoteCallbacks
        Object which implements the callbacks as methods.

        The callbacks should be an object which inherits from
        `pyclass:RemoteCallbacks`.
    """
    ...

tree_entry_key = ...
settings = ...
